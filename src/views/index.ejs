<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>VTubers List - ihateani.me</title>
    <meta name="description" content="VTuber List for API version 2">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- OpenGraph -->
    <meta property="og:title" content="VTuber List">
    <meta property="og:description" content="VTuber List for ihateani.me API v2">
    <meta property="og:url" content="https://vtuber.ihateani.me/">
    <meta property="og:site_name" content="ihateani.me API">
    <meta property="og:image" content="/assets/favicon.png">
    <meta property="og:type" content="website">
    <meta name="theme-color" content="#383838">

    <link rel="icon" type="image/png" href="/assets/favicon.png">
    <link rel="icon" href="/assets/favicon.ico">

    <!-- Preconnect -->
    <link rel="preconnect" href="https://i.ytimg.com">
    <link rel="preconnect" href="https://api.ihateani.me">
    <link rel="dns-prefetch" href="https://i.ytimg.com">
    <link rel="dns-prefetch" href="https://api.ihateani.me">

    <!-- Preload some CSS -->
    <style type="text/css">
        *,:after,:before{-webkit-box-sizing:border-box;box-sizing:border-box}:root{--bs-blue:#0d6efd;--bs-indigo:#6610f2;--bs-purple:#6f42c1;--bs-pink:#d63384;--bs-red:#dc3545;--bs-orange:#fd7e14;--bs-yellow:#ffc107;--bs-green:#198754;--bs-teal:#20c997;--bs-cyan:#0dcaf0;--bs-gray:#757575;--bs-gray-dark:#4f4f4f;--bs-primary:#1266f1;--bs-secondary:#b23cfd;--bs-success:#00b74a;--bs-info:#39c0ed;--bs-warning:#ffa900;--bs-danger:#f93154;--bs-light:#fbfbfb;--bs-dark:#262626;--bs-white:#fff;--bs-black:#000;--bs-font-sans-serif:system-ui,-apple-system,"Segoe UI",Roboto,"Helvetica Neue",Arial,"Noto Sans","Liberation Sans",sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji";--bs-font-monospace:SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace;--bs-gradient:linear-gradient(180deg,hsla(0,0%,100%,0.15),hsla(0,0%,100%,0))}:root{scroll-behavior:smooth}:root{--mdb-font-roboto:"Roboto",sans-serif}body{margin:0;font-size:1rem;font-weight:400;background-color:#fff;-webkit-text-size-adjust:100%;-webkit-tap-highlight-color:rgba(0,0,0,0)}body{font-family:var(--mdb-font-roboto);line-height:1.6;color:#4f4f4f}.navbar{position:relative;-ms-flex-wrap:wrap;flex-wrap:wrap;padding-top:.5rem;padding-bottom:.5rem}.navbar,.navbar>.container,.navbar>.container-fluid,.navbar>.container-lg,.navbar>.container-md,.navbar>.container-sm,.navbar>.container-xl,.navbar>.container-xxl{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between}.sticky-top{position:sticky;top:0;z-index:1020}.bg-dark{background-color:#262626!important}.navbar{-webkit-box-shadow:0 10px 20px 0 rgba(0,0,0,.05);box-shadow:0 10px 20px 0 rgba(0,0,0,.05);padding-top:.5625rem}.container,.container-fluid,.container-lg,.container-md,.container-sm,.container-xl,.container-xxl{width:100%;padding-right:var(--bs-gutter-x,.75rem);padding-left:var(--bs-gutter-x,.75rem);margin-right:auto;margin-left:auto}.navbar>.container,.navbar>.container-fluid,.navbar>.container-lg,.navbar>.container-md,.navbar>.container-sm,.navbar>.container-xl,.navbar>.container-xxl{-ms-flex-wrap:inherit;flex-wrap:inherit}a{color:#1266f1;text-decoration:underline}a{text-decoration:none}.navbar-brand{padding-top:.3rem;padding-bottom:.3rem;margin-right:1rem;font-size:1.25rem;text-decoration:none;white-space:nowrap}.navbar-brand{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.navbar-dark .navbar-brand,.navbar-dark .navbar-brand:focus,.navbar-dark .navbar-brand:hover{color:#fff}button{border-radius:0}button,input,optgroup,select,textarea{margin:0;font-family:inherit;font-size:inherit;line-height:inherit}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button}.navbar-toggler{padding:.25rem .75rem;font-size:1.25rem;line-height:1;background-color:transparent;border:1px solid transparent;border-radius:.25rem;-webkit-transition:-webkit-box-shadow .15s ease-in-out;transition:-webkit-box-shadow .15s ease-in-out;transition:box-shadow .15s ease-in-out;transition:box-shadow .15s ease-in-out,-webkit-box-shadow .15s ease-in-out}.border{border:1px solid #e0e0e0!important}.border-2{border-width:2px!important}.navbar-toggler{border:0}[type=button]:not(:disabled),[type=reset]:not(:disabled),[type=submit]:not(:disabled),button:not(:disabled){cursor:pointer}.navbar-dark .navbar-toggler{color:hsla(0,0%,100%,.55);border-color:hsla(0,0%,100%,.1)}.navbar-dark .navbar-toggler,.navbar-light .navbar-toggler{border:0}.navbar-collapse{-webkit-box-align:center;-ms-flex-align:center;align-items:center;width:100%}.justify-content-between{-webkit-box-pack:justify!important;-ms-flex-pack:justify!important;justify-content:space-between!important}.collapse:not(.show){display:none}.mt-4{margin-top:1.5rem!important}.pb-4{padding-bottom:1.5rem!important}.text-center{text-align:center!important}.spinner-grow{display:inline-block;width:2rem;height:2rem;vertical-align:text-bottom;background-color:currentColor;border-radius:50%;opacity:0;-webkit-animation:spinner-grow .75s linear infinite;animation:spinner-grow .75s linear infinite}.text-white{color:#fff!important}.visually-hidden,.visually-hidden-focusable:not(:focus){position:absolute!important;width:1px!important;height:1px!important;padding:0!important;margin:-1px!important;overflow:hidden!important;clip:rect(0,0,0,0)!important;white-space:nowrap!important;border:0!important}p{margin-top:0;margin-bottom:1rem}.mt-2{margin-top:.5rem!important}.fade{-webkit-transition:opacity .15s linear;transition:opacity .15s linear}.modal{position:fixed;top:0;left:0;z-index:1050;display:none;width:100%;height:100%;overflow:hidden;outline:0}.fade:not(.show){opacity:0}.text-muted{color:#757575!important}hr{margin:1rem 0;color:inherit;background-color:currentColor;border:0;opacity:.25}hr:not([size]){height:1px}.p-3{padding:1rem!important}b,strong{font-weight:bolder};
    </style>
    <style type="text/css">
        .bg-darkgrey,.btn-darkgrey{background-color:#2a2d2f!important}.btn-darkgrey:active,.btn-darkgrey:focus,.btn-darkgrey:hover{background-color:#35383a!important}.text-darkgrey{color:#2a2d2f!important}.text-twitch{color:#8e42fe!important}.text-twcast{color:#027af8!important}.text-bili2{color:#00a1d6!important}.text-mildom{color:#38cce3!important}.border-twitch{border-color:#8e42fe!important}.border-twcast{border-color:#027af8!important}.border-bili2{border-color:#00a1d6!important}.border-mildom{border-color:#38cce3!important}.floating-btn{position:fixed;width:60px;height:60px;bottom:40px;right:40px;background-color:#c50909;color:#fff;border-radius:50px;text-align:center;box-shadow:0 0 5px 0 #2a2d2f;border-color:transparent;z-index:999}
    </style>

    <!-- CSS Preloading -->
    <link rel="preload" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" as="style"
        onload="this.onload=null;this.rel='stylesheet'">
    <link rel="preload" href="https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/3.0.0/mdb.min.css" as="style"
        onload="this.onload=null;this.rel='stylesheet'">
    <link rel="preload" href="/assets/css/ihaiconsv2.3.css" as="style" onload="this.onload=null;this.rel='stylesheet'">
    <!-- Fallback -->
    <noscript>
        <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
        <link href="https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/3.0.0/mdb.min.css" rel="stylesheet" />
        <link href="/assets/css/ihaiconsv2.3.css" rel="stylesheet">
    </noscript>
    <style type="text/css">
        .bg-darkgrey,.btn-darkgrey{background-color:#2a2d2f!important}.btn-darkgrey:active,.btn-darkgrey:focus,.btn-darkgrey:hover{background-color:#35383a!important}.text-darkgrey{color:#2a2d2f!important}.text-twitch{color:#8e42fe!important}.text-twcast{color:#027af8!important}.text-bili2{color:#00a1d6!important}.text-mildom{color:#38cce3!important}.border-twitch{border-color:#8e42fe!important}.border-twcast{border-color:#027af8!important}.border-bili2{border-color:#00a1d6!important}.border-mildom{border-color:#38cce3!important}.floating-btn{position:fixed;width:60px;height:60px;bottom:40px;right:40px;background-color:#c50909;color:#fff;border-radius:50px;text-align:center;box-shadow:0 0 5px 0 #2a2d2f;border-color:transparent;z-index:999}
    </style>
    <style type="text/css">
        ::-webkit-scrollbar {
            width: 6px;
            height: 6px
        }

        ::-webkit-scrollbar-button {
            width: 0;
            height: 0
        }

        ::-webkit-scrollbar-thumb {
            background: #4d4d4d;
            border: 3px none grey;
            border-radius: 50px
        }

        ::-webkit-scrollbar-thumb:hover {
            background: #7a7a7a
        }

        ::-webkit-scrollbar-thumb:active {
            background: #2e2e2e
        }

        ::-webkit-scrollbar-track {
            background: #707070;
            border: 0 none #fff;
            border-radius: 100px
        }

        ::-webkit-scrollbar-track:hover {
            background: #666
        }

        ::-webkit-scrollbar-track:active {
            background: #666
        }

        ::-webkit-scrollbar-corner {
            background: 0 0
        }
    </style>
</head>

<body class="bg-darkgrey">
    <nav id="main-nav" class="navbar navbar-expand-lg navbar-dark bg-dark sticky-top">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">VTuber API</a>
            <button class="navbar-toggler border border-2" style="border-color: #525252 !important;" type="button"
                data-bs-toggle="collapse" data-bs-target="#navbarNavDarkDropdown" aria-controls="navbarNavDarkDropdown"
                aria-expanded="false" aria-label="Toggle navigation">
                <i class="ihaicon">menu</i>
            </button>
            <div class="collapse navbar-collapse justify-content-between" id="navbarNavDarkDropdown">
                <div class="navbar-nav">
                    <a class="nav-link active" aria-current="page" href="#">Home</a>
                    <a class="nav-link" href="/lives">Lives</a>
                    <a class="nav-link" href="/schedules">Schedule</a>
                    <a class="nav-link" href="/playground"><i class="ihaicon me-1">graphql_icon</i>Playground</a>
                </div>
                <div class="navbar-nav">
                    <a class="nav-link" href="/settings"><i class="ihaicon">settings</i></a>
                    <a class="nav-link" href="/admin"><i class="ihaicon">sign_in</i></a>
                </div>
            </div>
        </div>
    </nav>
    <div id="main" class="container-fluid mt-4 pb-4">
        <div class="text-white">
            <p>Find users</p>
            <div class="col-sm-3 mb-3">
                <input type="text" class="form-control" id="searchBox" onkeyup="doSearchAndFilter()"
                    placeholder="Search..." disabled>
            </div>
            <p>Platform Filters</p>
            <div class="form-check form-check-inline form-switch">
                <input class="form-check-input" type="checkbox" name="inlineRadioOptions" id="ytPlatFilter"
                    value="youtube" checked disabled>
                <label class="form-check-label" for="ytPlatFilter"><i
                        class="ihaicon text-danger fs-4">youtube_icon</i></label>
            </div>
            <div class="form-check form-check-inline form-switch">
                <input class="form-check-input" type="checkbox" name="inlineRadioOptions" id="ttvPlatFilter"
                    value="twitch" checked disabled>
                <label class="form-check-label" for="ttvPlatFilter"><i
                        class="ihaicon text-twitch fs-4">twitch_icon</i></label>
            </div>
            <div class="form-check form-check-inline form-switch">
                <input class="form-check-input" type="checkbox" name="inlineRadioOptions" id="twcastPlatFilter"
                    value="twitcasting" checked disabled>
                <label class="form-check-label" for="twcastPlatFilter"><i
                        class="ihaicon text-twcast fs-4">twitcasting_icon</i></label>
            </div>
            <div class="form-check form-check-inline form-switch">
                <input class="form-check-input" type="checkbox" name="inlineRadioOptions" id="mildomPlatFilter"
                    value="mildom" checked disabled>
                <label class="form-check-label" for="mildomPlatFilter"><i class="ihaicon text-mildom fs-4">mildom_sicon</i></label>
            </div>
        </div>
        <hr>
        <div id="loading-signal" class="text-center">
            <div class="spinner-grow text-white" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p id="loading-text" class="mt-2 text-white">Loading...</p>
        </div>
        <div id="group-modal" class="modal fade" tabindex="-1">
            <div class="modal-dialog modal-dialog-scrollable">
                <div class="modal-content bg-dark text-white">
                    <div class="modal-header border-dark">
                        <h5 class="modal-title">Groups</h5>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"
                            aria-label="Close"></button>
                    </div>
                    <div class="modal-body text-center">
                        <div id="group-modal-grid" class="d-grid gap-2">
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <button id="group-btn-modal" type="button" data-bs-toggle="modal" data-bs-target="#group-modal"
            class="floating-btn">
            <i class="ihaicon">peoples</i>
        </button>
    </div>
    <footer class="text-center text-lg-start text-muted">
        <hr>
        <div class="text-center p-3" class="bg-darkgrey">
            Created by <b>N4O#8868</b><br>
            © 2020-2021
            <a class="text-white" href="https://ihateani.me/">ihateani.me</a>
        </div>
    </footer>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-ygbV9kiqUc6oa4msXn9868pTtWMgiQaeYH7/t7LECLbyPA2x65Kgf80OJFdroafW" crossorigin="anonymous">
    </script>
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"
        integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/vanilla-lazyload@17.3.0/dist/lazyload.min.js"></script>
    <script type="text/javascript">
        "use strict"

        const $dropdown = $("#group-dropdown");
        const $main = $("#main");
        const $loader = $("#loading-signal");
        const $gridModal = $("#group-modal-grid");
        var fetchedPage = 0;

        let gqlSchemas = `query VTuberChannel($cursor:String) {
            vtuber {
                channels(platforms:[youtube,twitch,twitcasting,mildom],cursor:$cursor,limit:75) {
                    _total
                    items {
                        id
                        name
                        image
                        platform
                        group
                        publishedAt
                        statistics {
                            subscriberCount
                            viewCount
                        }
                    }
                    pageInfo {
                        results_per_page
                        hasNextPage
                        nextCursor
                    }
                }
            }
}`;

        // Modified version of:
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Grouping_objects_by_a_property
        function groupBy(objectArray, property) {
            return objectArray.reduce(function (acc, obj) {
                let key;
                if (typeof property === "function") {
                    key = property(obj);
                } else {
                    key = obj[property];
                }
                if (!acc[key]) {
                    acc[key] = []
                }
                acc[key].push(obj)
                return acc
            }, {})
        }

        // https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore#_get
        function get(obj, path, defaults = undefined) {
            const travel = regexp =>
                String.prototype.split
                .call(path, regexp)
                .filter(Boolean)
                .reduce((res, key) => (res !== null && res !== undefined ? res[key] : res), obj);
            const result = travel(/[,[\]]+?/) || travel(/[,[\].]+?/);
            return result === undefined || result === obj ? defaults : result;
        }

        // Modified version of:
        // https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore#_sortby-and-_orderby
        function sortBy(data, key_or_func) {
            if (typeof data === "undefined" || data === null) {
                return data;
            }
            if (data.length < 1) {
                return data;
            }
            let result = data.concat().sort((a, b) => {
                let a1, b1;
                if (typeof key_or_func === "function") {
                    a1 = key_or_func(a);
                    b1 = key_or_func(b);
                } else {
                    a1 = a[key_or_func];
                    b1 = b[key_or_func];
                }
                return (a1 > b1) ? 1 : ((b1 > a1) ? -1 : 0);
            })
            return result;
        }

        let GROUPS_NAME_MAP = {
            "animare": "Animare",
            "axel-v": "AXEL-V",
            "cattleyarg": "Cattleya Regina Games",
            "dotlive": ".LIVE",
            "eilene": "Eilene",
            "entum": "ENTUM",
            "hanayori": "Hanayori",
            "hololive": "Hololive",
            "hololiveen": "Hololive English",
            "hololivecn": "Hololive China",
            "hololiveid": "Hololive Indonesia",
            "holostars": "Holostars",
            "honeystrap": "Honeystrap",
            "irisbg": "Iris Black Games",
            "kamitsubaki": "KAMITSUBAKI Studio",
            "kizunaai": "Kizuna Ai Co.",
            "lupinusvg": "Lupinus Video Games",
            "mahapanca": "MAHA5",
            "nijisanji": "NIJISANJI",
            "nijisanjiid": "NIJISANJI Indonesia",
            "nijisanjiin": "NIJISANJI India",
            "nijisanjikr": "NIJISANJI Korea",
            "nijisanjien": "NIJISANJI English",
            "noriopro": "Norio Production",
            "paryiproject": "Paryi Project",
            "solovtuber": "Solo/Indie",
            "sugarlyric": "SugarLyric",
            "tsunderia": "Tsunderia",
            "upd8": "upd8",
            "vapart": "VAPArt",
            "veemusic": "VEEMusic",
            "vgaming": "VGaming",
            "vic": "VIC",
            "virtuareal": "VirtuaReal",
            "vivid": "ViViD",
            "voms": "VOMS",
            "vspo": "VTuber eSports Project",
            "vshojo": "VShojo"
        }

        const getChannelQuery = async function (cursor = "") {
            let apiRes = await fetch("https://api.ihateani.me/v2/graphql", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                },
                body: JSON.stringify({
                    query: gqlSchemas,
                    variables: {
                        cursor: cursor
                    }
                })
            }).then((res) => res.json());
            return apiRes;
        }

        const getAllChannelsAsync = async function (cursor = "") {
            let results = await getChannelQuery(cursor);
            let gqlres = results.data.vtuber;
            fetchedPage++;
            let expectedTotal = Math.ceil(gqlres.channels._total / gqlres.channels.pageInfo.results_per_page);
            $("#loading-text").text(`Loading (${fetchedPage}/${expectedTotal})...`);

            let mainResults = gqlres.channels.items;

            let pageData = gqlres.channels.pageInfo;
            if (pageData.hasNextPage && pageData.nextCursor) {
                console.log(`[API] Next page detected, paginating...`);
                return mainResults.concat(await getAllChannelsAsync(pageData.nextCursor));
            } else {
                return mainResults;
            }
        }

        const PLACEHOLDER_IMG = `data:image/svg+xml,%3Csvg viewBox='0 0 300 300' xmlns='http://www.w3.org/2000/svg'%3E%3Crect x='0' y='0' width='100%25' height='100%25' fill='%23262626'/%3E%3C/svg%3E`;

        function doReadjustAfterFilter() {
            console.log("Called!");
            $(".vtubers-group").each((i, elem) => {
                let $elem = $(elem);
                let vtid = $elem.attr("id");
                let $modalbtn = $(`#${vtid}-modal-btn`);
                let visible = [];
                $elem.find(".vtubers-card").each((v, e2) => {
                    if ($(e2).attr("data-hidden") === "false") {
                        visible.push(v);
                    }
                });
                let amountStr = visible.length.toString();
                if (visible.length === 0) {
                    $elem.hide();
                    $modalbtn.hide();
                } else {
                    $elem.show();
                    $elem.children("h2").children("span").text(amountStr);
                    $modalbtn.children("span").text(amountStr);
                    $modalbtn.show();
                }
            })
        }

        function doSearchAndFilter() {
            let $vtcards = $(".vtubers-card");
            if ($vtcards.length < 1) {
                return;
            }
            let filter = $("#searchBox").val().toLowerCase();
            let match = $vtcards.each((i, elem) => {
                let $elem = $(elem);
                let val = $elem.attr("data-search");
                if (val.toLowerCase().indexOf(filter) > -1) {
                    $elem.attr("data-hidden", "false");
                    $elem.fadeIn();
                } else {
                    $elem.fadeOut();
                    $elem.attr("data-hidden", "true");
                }
            });
            doReadjustAfterFilter();
        }

        function createCard(channelInfo) {
            let chanStats = channelInfo.statistics;
            // console.log(channelInfo);
            let $chanCol = $(`<div class="col vtubers-card" data-search="${channelInfo.name}" data-hidden="false" />`);
            let $cardMain, border;
            if (channelInfo.platform === "youtube") {
                border = "border-danger";
                $cardMain = $(`<div class="card border border-danger text-white bg-dark" />`);
            } else if (channelInfo.platform === "twitch") {
                border = "border-twitch";
                $cardMain = $(`<div class="card border border-twitch text-white bg-dark" />`);
            } else if (channelInfo.platform === "twitcasting") {
                border = "border-twcast";
                $cardMain = $(`<div class="card border border-twcast text-white bg-dark" />`);
            } else if (channelInfo.platform === "mildom") {
                border = "border-mildom";
                $cardMain = $(`<div class="card border border-mildom text-white bg-dark" />"`);
            }
            $cardMain.append($(`<img class="card-img-top lazy" />`).attr("data-src", channelInfo.image).attr("alt",
                "Profile Picture").attr("src", PLACEHOLDER_IMG));
            let $titleCard = $(`<div class="card-body text-center" />`);
            if (channelInfo.platform === "youtube") {
                $titleCard.append($(`<i class="ihaicon mx-1 text-danger" />`).text("youtube_icon"));
                $titleCard.append($(`<span />`).text("YouTube"));
            } else if (channelInfo.platform === "twitch") {
                $titleCard.append($(`<i class="ihaicon mx-1 text-twitch" />`).text("twitch_icon"));
                $titleCard.append($(`<span />`).text("Twitch"));
            } else if (channelInfo.platform === "twitcasting") {
                $titleCard.append($(`<i class="ihaicon mx-1 text-twcast" />`).text("twitcasting_icon"));
                $titleCard.append($(`<span />`).text("Twitcasting"));
            } else if (channelInfo.platform === "mildom") {
                $titleCard.append($(`<i class="ihaicon mx-1 text-mildom" />`).text("mildom_sicon"));
                $titleCard.append($(`<span />`).text("Mildom"));
            }

            $titleCard.append($(`<h5 class="card-title" />`).text(channelInfo.name));
            $cardMain.append($titleCard);
            let $statsCard = $(`<ul class="list-group list-group-flush ${border}" />`)
                .append($(`<li class="list-group-item bg-dark text-white ${border}" />`).text(
                    `Subscribers: ${chanStats.subscriberCount.toLocaleString()}`));
            if (!["mildom", "twitcasting"].includes(channelInfo.platform)) {
                $statsCard.append($(`<li class="list-group-item bg-dark text-white ${border}" />`).text(
                    `Views: ${chanStats.viewCount.toLocaleString()}`));
            }
            $cardMain.append($statsCard);
            let channelLink;
            if (channelInfo.platform === "youtube") {
                channelLink = `https://youtube.com/channel/${channelInfo.id}`;
            } else if (channelInfo.platform === "twitch") {
                channelLink = `https://twitch.tv/${channelInfo.id}`;
            } else if (channelInfo.platform === "twitcasting") {
                channelLink = `https://twitcasting.tv/${channelInfo.id}`;
            } else if (channelInfo.platform === "mildom") {
                channelLink = `https://www.mildom.com/profile/${channelInfo.id}`;
            }
            let $linkCard = $(`<div class="card-body" />`)
                .append($(`<a class="card-link text-info text-decoration-underline" rel="noopener" target="_blank" />`)
                    .attr("href", channelLink).text("Watch!"));
            $cardMain.append($linkCard);
            $chanCol.append($cardMain);
            // $cardMain.appendTo($groupRows);
            return $chanCol;
        }

        function generateColumn(groupName, groupData) {
            let $topDiv = $(`<div id="${groupName}" class="container-fluid pb-3 vtubers-group" />`);
            $topDiv.append($(
                `<h2 class="text-white py-3">${get(GROUPS_NAME_MAP, groupName, groupName)} <span class="badge bg-danger fs-5 fw-normal">${groupData.length}</span></h2>`
            ));
            let $groupRowsYT = $(`<div class="row row-cols-1 row-cols-md-5 g-4 mb-2" />`);
            let $groupRowsTTV = $(`<div class="row row-cols-1 row-cols-md-5 g-4 mb-2" />`);
            let $groupRowsTW = $(`<div class="row row-cols-1 row-cols-md-5 g-4 mb-2" />`);
            let $groupRowsMD = $(`<div class="row row-cols-1 row-cols-md-5 g-4 mb-2" />`);
            let groupedByPlatform = groupBy(groupData, "platform");

            let ytCards = sortBy(get(groupedByPlatform, "youtube", []), "publishedAt").map(createCard);
            let ttvCards = sortBy(get(groupedByPlatform, "twitch", []), "publishedAt").map(createCard);
            let twCards = sortBy(get(groupedByPlatform, "twitcasting", []), "publishedAt").map(createCard);
            let mildomCards = sortBy(get(groupedByPlatform, "mildom", []), "name").map(createCard);
            if (ytCards.length > 0) {
                ytCards.forEach(($card) => {
                    $groupRowsYT.append($card);
                })
                $topDiv.append($groupRowsYT);
            }
            if (ttvCards.length > 0) {
                ttvCards.forEach(($card) => {
                    $groupRowsTTV.append($card);
                })
                $topDiv.append($groupRowsTTV);
            }
            if (twCards.length > 0) {
                twCards.forEach(($card) => {
                    $groupRowsTW.append($card);
                })
                $topDiv.append($groupRowsTW);
            }
            if (mildomCards.length > 0) {
                mildomCards.forEach(($card) => {
                    $groupRowsMD.append($card);
                });
                $topDiv.append($groupRowsMD);
            }
            return $topDiv;
        }

        $("#ytPlatFilter").change(function () {
            let is_checked = $(this).prop("checked");
            if (is_checked) {
                let showedThings = [];
                $(".vtubers-card > .border-danger").each(function (i, elem) {
                    let $elem = $(elem);
                    let $fp = $elem.parent();
                    $fp.attr("data-hidden", "false");
                    let fpId = $fp.parent().parent().attr("id");
                    if (!showedThings.includes(fpId)) {
                        showedThings.push(fpId);
                        $fp.parent().fadeIn();
                    }
                    $elem.fadeIn();
                });
            } else {
                let hiddenThings = [];
                $(".vtubers-card > .border-danger").each(function (i, elem) {
                    let $elem = $(elem);
                    let $fp = $elem.parent();
                    $fp.attr("data-hidden", "true");
                    let fpId = $fp.parent().parent().attr("id");
                    if (!hiddenThings.includes(fpId)) {
                        hiddenThings.push(fpId);
                        $fp.parent().fadeOut();
                    }
                    $elem.fadeOut();
                });
            }
            doReadjustAfterFilter();
        });

        $("#ttvPlatFilter").change(function () {
            let is_checked = $(this).prop("checked");
            if (is_checked) {
                let showedThings = [];
                $(".vtubers-card > .border-twitch").each(function (i, elem) {
                    let $elem = $(elem);
                    let $fp = $elem.parent();
                    $fp.attr("data-hidden", "false");
                    let fpId = $fp.parent().parent().attr("id");
                    if (!showedThings.includes(fpId)) {
                        showedThings.push(fpId);
                        $fp.parent().fadeIn();
                    }
                    $elem.fadeIn();
                });
            } else {
                let hiddenThings = [];
                $(".vtubers-card > .border-twitch").each(function (i, elem) {
                    let $elem = $(elem);
                    let $fp = $elem.parent();
                    $fp.attr("data-hidden", "true");
                    let fpId = $fp.parent().parent().attr("id");
                    if (!hiddenThings.includes(fpId)) {
                        hiddenThings.push(fpId);
                        $fp.parent().fadeOut();
                    }
                    $elem.fadeOut();
                });
            }
            doReadjustAfterFilter();
        });

        $("#twcastPlatFilter").change(function () {
            let is_checked = $(this).prop("checked");
            if (is_checked) {
                let showedThings = [];
                $(".vtubers-card > .border-twcast").each(function (i, elem) {
                    let $elem = $(elem);
                    let $fp = $elem.parent();
                    $fp.attr("data-hidden", "false");
                    let fpId = $fp.parent().parent().attr("id");
                    if (!showedThings.includes(fpId)) {
                        showedThings.push(fpId);
                        $fp.parent().fadeIn();
                    }
                    $elem.fadeIn();
                });
            } else {
                let hiddenThings = [];
                $(".vtubers-card > .border-twcast").each(function (i, elem) {
                    let $elem = $(elem);
                    let $fp = $elem.parent();
                    $fp.attr("data-hidden", "true");
                    let fpId = $fp.parent().parent().attr("id");
                    if (!hiddenThings.includes(fpId)) {
                        hiddenThings.push(fpId);
                        $fp.parent().fadeOut();
                    }
                    $elem.fadeOut();
                });
            }
            doReadjustAfterFilter();
        });

        $("#mildomPlatFilter").change(function () {
            let is_checked = $(this).prop("checked");
            if (is_checked) {
                let showedThings = [];
                $(".vtubers-card > .border-mildom").each(function (i, elem) {
                    let $elem = $(elem);
                    let $fp = $elem.parent();
                    $fp.attr("data-hidden", "false");
                    let fpId = $fp.parent().parent().attr("id");
                    if (!showedThings.includes(fpId)) {
                        showedThings.push(fpId);
                        $fp.parent().fadeIn();
                    }
                    $elem.fadeIn();
                });
            } else {
                let hiddenThings = [];
                $(".vtubers-card > .border-mildom").each(function (i, elem) {
                    let $elem = $(elem);
                    let $fp = $elem.parent();
                    $fp.attr("data-hidden", "true");
                    let fpId = $fp.parent().parent().attr("id");
                    if (!hiddenThings.includes(fpId)) {
                        hiddenThings.push(fpId);
                        $fp.parent().fadeOut();
                    }
                    $elem.fadeOut();
                });
            }
            doReadjustAfterFilter();
        });

        (async () => {
            console.log("[API] Fetching all channels data...");
            const channelsSets = await getAllChannelsAsync();
            console.log("[API] Grouping results...");
            let unsortedGroupedData = groupBy(channelsSets, "group");
            let groupedData = {};
            Object.keys(unsortedGroupedData).sort().forEach(function (key) {
                groupedData[key] = unsortedGroupedData[key];
            })
            let allJQData = [];

            Object.keys(groupedData).sort().forEach(function (group) {
                $gridModal.append($(
                    `<a id="${group}-modal-btn" class="btn btn-dark btn-darkgrey" href="#${group}" role="button">${get(GROUPS_NAME_MAP, group, group)} <span class="badge bg-danger mx-1 rounded-0">${groupedData[group].length}</span></a>`
                ));
            })

            for (let key in groupedData) {
                let value = groupedData[key];
                let $r = generateColumn(key, value);
                allJQData.push($r);
            }
            $loader.fadeOut(500);
            allJQData.forEach(($jqd) => {
                $jqd.show();
                $main.append($jqd);
            })

            var lazyLoadInstance = new LazyLoad({});
            lazyLoadInstance.update();

            $("#searchBox").attr("disabled", false);
            $("#ytPlatFilter").attr("disabled", false);
            $("#ttvPlatFilter").attr("disabled", false);
            $("#twcastPlatFilter").attr("disabled", false);
            $("#mildomPlatFilter").attr("disabled", false);
        })();
    </script>
</body>

</html>